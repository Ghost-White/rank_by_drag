1、事件响应
一开始打算用onmousedown、onmousemove、onmouseup实现，后扑街。重新用h5的drag和drop事件，在层次结构上纠结了一下，主要是dragleave事件，鼠标移动到padding区域时就会触发，因为一开始事件绑定在父元素<li>上，由于触发事件的是子元素<img>，由事件冒泡到父元素处理，因此鼠标移出li会触发两次dragleave：一次是移动到img的padding上触发，另一次是移动到li外时触发。

2、动画实现
（1.最开始的方法是构造两个与tar、src节点外形一模一样的<div>，使其定位为绝对定位，然后用js动画实现（类似jQuery animate方法），扑街（主要是因为麻烦，易出错，中途停止）。
（2.后用css transition实现：在插入排序的方式中，样式上先将src 用渐变translate到tar之前的位置，tar元素translate到其后一个元素的位置，然后调整节点顺序（将src节点插入到tar之前），然后再将translate清零。这带来一个问题，位置移动的时候tar会覆盖原来在其后的元素，视觉上不像是“挤开”的。
（3.后来采用了先将src节点插入到tar节点之前，然后再做样式上的变化，这样的话还需要先将原先的src、tar位置还原，再变化，实际实现过程中，将渐变写在位置还原之后，然后再做渐变位置变化是行不通的。渐变在一开始还原的过程中就会生效。
（4、最后，采用了先变样式，再换节点顺序的方法。但是样式变换需要将src、tar以及他们两个中间的所有节点(某些情况下还有后面的节点)也要跟着变化，不过这些中间节点不需要渐变，但需要判断是否移动、往前移还是往后移、是否需要换行等。
（5、最后一个问题就是元素样式换行的问题：一行的最后一个元素和第一个元素的移动都需要考虑是否换行、是否需要移动，如果元素宽度都相同的话，问题会简单许多。为了适应元素宽度不同的情况，在换行问题上做了许多逻辑判断，主要考虑了src元素的尺寸、元素离边界的距离、前后元素是否换行等条件。